y=list()
xSamp.distr<-replicate(100,expr={xSamp <- rnorm(100,mean=100,sd=10)})
sample.sizes=c(10,20,50,100,200,500,1000)
for (i in 1:7) {
y[[i]] <- sample(xSamp.distr,sample.sizes)
}
y
y=list()
xSamp.distr<-replicate(100,expr={xSamp <- rnorm(100,mean=100,sd=10)})
sample.sizes=c(10,20,50,100,200,500,1000)
for (i in 1:7) {
y[[i]] <- sample(xSamp.distr,sample.sizes[i])
}
y
list()
a = list()
a
y[1]
y[2]
y[3]
y[4]
y[5]
y[6]
y=list()
xSamp.distr<-replicate(100,expr={xSamp <- rnorm(100,mean=100,sd=10)})
sample.sizes=c(10,20,50,100,200,500,1000)
for (i in 1:length(sample.sizes) {
y[[i]] <- sample(xSamp.distr,sample.sizes[i])
}
y=list()
xSamp.distr<-replicate(100,expr={xSamp <- rnorm(100,mean=100,sd=10)})
sample.sizes=c(10,20,50,100,200,500,1000)
for (i in 1:length(sample.sizes)) {
y[[i]] <- sample(xSamp.distr,sample.sizes[i])
}
niter = 1e5
below = rep(0, niter)
set.seed(2009)
for (i in 1:niter) {
r = rnorm(45, mean = 0.05/253, sd =0.23/sqrt(253))
logPrice = log(1e6) + cumsum(r)
minlogP = min(logPrice)
below[i] = as.numeric(minlogP < log(950000))
}
mean(below)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
pheno
gnames
head(geneData)
length(pheno)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y) {
for(i in 1:nrow(x)){
p = t.test(i~y)$p.value
if (p<(0.05/1000)) {
newData = c(p)
}
}
dim(newData) = c(,20)
}
rowTtest(geneData,pheno)
ncol(geneData)
y
geneData
t.test(geneData[100,]~pheno)
t.test(geneData[100,]~pheno)$p
t.test(geneData[100,]~pheno)$p.value
rowTtest = function(x,y) {
for(i in 1:nrow(x)) {
p = t.test(x[i,]~y)$p.value
if (p<(0.05/1000)) {
newData = c(p)
}
}
dim(newData) = c(,20)
}
rowTtest(geneData,pheno)
c(p)
?matrix
newData = c()
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y) {
newData = c()
for(i in 1:nrow(x)) {
p = t.test(x[i,]~y)$p.value
if (p<(0.05/1000)) {
newData = append(newData, p)
}
}
return newData
}
rowTtest(geneData,pheno)
rowTtest = function(x,y) {
newData = c()
for(i in 1:nrow(x)) {
p = t.test(x[i,]~y)$p.value
if (p<(0.05/1000)) {
newData = append(newData, p)
}
}
return newData
}
rowTtest = function(x,y) {
newData = c()
for(i in 1:nrow(x)) {
p = t.test(x[i,]~y)$p.value
if (p<(0.05/1000)) {
newData = append(newData, p)
}
}
return(newData)
}
rowTtest = function(x,y) {
newData = c()
for(i in 1:nrow(x)) {
p = t.test(x[i,]~y)$p.value
if (p<(0.05/1000)) {
newData = append(newData, p)
}
}
return(newData)
}
rowTtest(geneData,pheno)
rowTtest = function(x,y) {
newData = c()
for(i in 1:nrow(x)) {
p = t.test(x[i,]~y)$p.value
#if (p<(0.05/1000)) {
newData = append(newData, p)
#}
}
return(newData)
}
rowTtest(geneData,pheno)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y){
significantGenes = vector()
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
rowTtest(geneData, pheno)
pheno
secondFunction = function(x){
p = t.test(x~pheno)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
sapply(X = geneData, secondFunction)
geneData
pheno
apply(geneData, 1, firstFunction)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
significantGenes = vector()
rowTtest = function(x,y){
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
firstFunction = function(x){
secondFunction(x,pheno)
dataMatrix = data.frame(significantGenes)
dataMatrix
}
secondFunction = function(x,y){
p = t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
rowTtest = function(x,y){
p = t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
apply(geneData, 1, firstFunction)
View(geneData)
lapply(geneData, firstFunction)
sapply(geneData,firstFunction)
apply(geneData, 1, firstFunction)
apply(geneData, 2, firstFunction)
apply(geneData, 1, firstFunction)
nrow(geneData)
firstFunction = function(x){
significantGenes = secondFunction(x,pheno)
dataMatrix = data.frame(significantGenes)
dataMatrix
}
secondFunction = function(x,y){
p = t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
return significantGenes
}
firstFunction = function(x){
significantGenes = secondFunction(x,pheno)
dataMatrix = data.frame(significantGenes)
dataMatrix
}
secondFunction = function(x,y){
p = t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
return (significantGenes)
}
apply(geneData, 1, firstFunction)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
significantGenes = vector()
rowTtest = function(x,y){
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
firstFunction = function(x){
significantGenes = secondFunction(x,pheno)
dataMatrix = data.frame(significantGenes)
dataMatrix
}
secondFunction = function(x,y){
p = t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
return (significantGenes)
}
apply(geneData, 1, firstFunction)
significantGenes
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
significantGenes = c()
firstFunction = function(x){
significantGenes = secondFunction(x,pheno)
dataMatrix = data.frame(significantGenes)
dataMatrix
}
secondFunction = function(x,y){
p = t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = append(significantGenes, p)
}
return (significantGenes)
}
apply(geneData, 1, firstFunction)
secondFunction(geneData, pheno)
rowTtest = function(x,y){
#p = t.test(x~y)$p.value
p = apply(x, 1, t.test(x~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
rowTtest = function(x,y){
#p = t.test(x~y)$p.value
p = apply(x, 1, t.test(x~y))$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
rowTtest(geneData, pheno)
rowTtest = function(x,y){
#p = t.test(x~y)$p.value
p = apply(x, 1, t.test(x~y))$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
secondFunction(geneData, pheno)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
significantGenes = c()
rowTtest = function(x,y){
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
rowTtest(geneData,pheno)
significantGenes
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
significantGenes = c()
rowTtest = function(x,y){
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
significantGenes
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y){
significantGenes = c()
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
significantGenes
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y){
significantGenes = c()
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
print(significantGenes)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
rowTtest(geneData,pheno)
significantGenes
print(significantGenes)
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y){
significantGenes = c()
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
print(significantGenes)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
significantGenes
geneData = rnorm(20000)
dim(geneData) = c(1000,20)
gnames = paste("G",1:1000,sep="")
rownames(geneData) = gnames
geneData[1:10,1:10] = geneData[1:10,1:10] + 4
pheno = c(rep("case",10),rep("control",10))
rowTtest = function(x,y){
significantGenes = c()
for(i in 1:nrow(x)){
p = t.test(x[i,]~y)$p.value
if(p<(0.05/1000)){
significantGenes = c(significantGenes,p)
print(significantGenes)
}
}
dataMatrix = data.frame(significantGenes)
dataMatrix
}
rowTtest(geneData, pheno)
light = 3 * 10^8
light = 3 * 10^2
distances = c(49, 3626, 1082, 8564, 12686,12357,13602,3540)
ratios = distances/light
times = distances/light
pings = c(5.2, 93.8, 29.5, 196.2, 178.8, 320.8, 212.07, 87.88)
plot(distances, ratios, type="l")
plot(distances, ratios)
ratios
plot(distances, ratios, pch=19)
light = 3 * 10^2
distances = c(49, 3626, 1082, 8564, 12686,12357,13602,3540)
times = distances/light
pings = c(5.2, 93.8, 29.5, 196.2, 178.8, 320.8, 212.07, 87.88)
ratios = pings/(2*times)
plot(distances, ratios, pch=19)
light = 3 * 10^2
distances = c(49, 3626, 1082, 8564, 12686,12357,13602,3540)
times = distances/light
pings = c(5.2, 93.8, 29.5, 196.2, 178.8, 320.8, 212.07, 87.88)
ratios = pings/(2*times)
plot(distances, ratios, pch=19)
options(show.signif.stars=FALSE) # gets rid of the stars
# Load the car library
library(car)
# The linear model can be use for bi-variate regression
# Examine the Davis data file
head(Davis) # first 6 rows
Davis
davis = Davis
View(davis)
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
install.packages(devtools)
install.packages('devtools')
library('devtools')
library(devtools)
install.packages("SparkR")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
library(SparkR)
if ("devtools" %in% loadedNamespaces()) {
stop("You must restart R before installing devtools")
}
url <- "https://gist.github.com/raw/4506250/devtools.zip"
temp <- file.path(tempdir(), "devtools.zip")
setInternet2(TRUE)
suppressWarnings(download.file(url, temp, mode = "wb"))
install.packages(temp, repos = NULL)
file.remove(temp)
install.packages('devtools')
install.packages(c('httr','RCurl'))
install.packages('devtools')
install.packages('devtools')
library(devtools)
install_github("amplab-extras/SparkR-pkg", subdir="pkg")
library(SparkR)
setwd("~/Desktop/FoodTruckFinder/data")
data = read.csv("Mobile_Food_Facility_Permit.csv", header=T)
View(data)
View(data)
unique(data$FacilityType)
unique(data$Status)
View(data)
require('sqldf')
approvedFoodTrucks = sqldf("select * from data where Status = 'Approved'")
approvedFoodTrucks = sqldf("select * from data where data.Status = 'Approved'")
approvedFoodTrucks = sqldf("select * from data where data.Status == 'Approved'")
approvedFoodTrucks = sqldf("select * from data where Status = Approved)
